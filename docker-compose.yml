version: '3'

x-airflow-common: &airflow-common
  build: ./airflow
  image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:password@airflow-db:5432/airflow_db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    MYSQL_USER: ${MYSQL_USER}
    MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    MYSQL_URL: ${MYSQL_URL}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_URL: ${POSTGRES_URL}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  networks:
    - app-network
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    airflow-db:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "6432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres:/docker-entrypoint-initdb.d
    networks:
      - app-network

  metastore-db:
    image: postgres:17
    container_name: metastore-db
    hostname: metastore-db
    ports:
      - "7432:5432"
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: password
      POSTGRES_DB: metastore_db
    volumes:
      - metastore_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U hive -d metastore_db -p 5432" ]
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  airflow-db:
    image: postgres:17
    container_name: airflow-db
    hostname: airflow-db
    ports:
      - "8432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: password
      POSTGRES_DB: airflow_db
    volumes:
      - airflow_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U airflow -d airflow_db -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/mysql:/docker-entrypoint-initdb.d
      - ./data/mysql:/var/lib/mysql-files
    networks:
      - app-network
    ports:
      - "3307:3306"

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9001" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c", "./setup_buckets.sh" ]
    volumes:
      - ./minio/create-buckets.sh:/setup_buckets.sh:ro
    networks:
      - app-network

  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark
    hostname: spark
    command: /bin/bash -c "sudo service ssh start && spark-class org.apache.spark.deploy.master.Master"
    user: root
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    networks:
      - app-network
    ports:
      - "7077:7077"
      - "5050:8080"
      - "2222:22"
    volumes:
      - ./spark/scripts:/opt/spark/work-dir
      - ./spark/conf/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml

  hive-metastore:
    image: apache/hive:4.0.0
    container_name: hive-metastore
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://metastore-db:5432/metastore_db -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=password"
    ports:
      - "9083:9083"
    volumes:
      - warehouse:/opt/hive/data/warehouse
      - ./hive-metastore/jars/postgresql-42.2.24.jar:/opt/hive/lib/postgresql-42.2.24.jar
      - ./hive-metastore/jars/aws-java-sdk-bundle-1.11.1026.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.1026.jar
      - ./hive-metastore/jars/hadoop-aws-3.3.6.jar:/opt/hive/lib/hadoop-aws-3.3.6.jar
      - ./hive-metastore/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
    depends_on:
      metastore-db:
        condition: service_healthy
    networks:
      - app-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 9090:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - airflow-init
      - hive-metastore
      - spark

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      - airflow-init
      - hive-metastore
      - spark

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    depends_on:
      - hive-metastore
      - spark

  trino:
    image: trinodb/trino:latest
    container_name: trino
    depends_on:
      - hive-metastore
      - minio
    ports:
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - ./trino/etc:/etc/trino

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  metastore_pgdata:
  airflow_pgdata:
  mysql_data:
  warehouse:
  minio-data:
